using System;

namespace Mods
{
    public class ClockMode
    {
        private byte[,] _data = {
                                {0b11100001, 0b00000000 }, //12       
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b11000000, 0b00000000 }, //1 //11       
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b11000000, 0b00000000 }, //2 //10      
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b11100000, 0b00000000 }, //3 //9      
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b11000000, 0b00000000 }, //4 //8       
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b11000000, 0b00000000 }, //5 //7      
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b11100000, 0b00000000 }, //6 //6      
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b11000000, 0b00000000 }, //7 //5       
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b11000000, 0b00000000 }, //8 //4      
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b11100000, 0b00000000 }, //9 //3      
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b11000000, 0b00000000 }, //10 //2       
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b11000000, 0b00000000 }, //11 //1     
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                                {0b10000000, 0b00000000 },
                               };
        public ClockMode() { }

        /// <summary>
        /// Метод возвращает массив, готовый к отрисовке
        /// </summary>
        /// <returns></returns>
        public byte[,] GetDataArray()
        {
            SetTime();
            return _data;
        }

        /// <summary>
        /// Метод кодирующий значение текущего времени
        /// </summary>
        private void SetTime()
        {
            DateTime dateTime = DateTime.Now;
            byte bitHour;
            /*BitArray bitHour = new BitArray(BitConverter.GetBytes(time.Hour));*/
            if (dateTime.Hour > 12)
            {
                bitHour = (byte)(120 - (dateTime.Hour - 12) * 5 * 2);
            }
            else
            {
                bitHour = (byte)(120 - dateTime.Hour * 5 * 2);
            }
            byte bitMinute = (byte)(120 - dateTime.Minute * 2);
            byte bitSecond = (byte)(120 - dateTime.Second * 2);

            for (int i = 0; i < 8; i++)
            {
                _data[i + 1, 0] &= 0b11111110;
                _data[i + 9, 0] &= 0b11111110;
                _data[i + 17, 0] &= 0b11111110;

                _data[i + 1, 0] |= (byte)((bitHour >> i) & 0b00000001);
                _data[i + 9, 0] |= (byte)((bitMinute >> i) & 0b00000001);
                _data[i + 17, 0] |= (byte)((bitSecond >> i) & 0b00000001);
            }
        }
    }
}
